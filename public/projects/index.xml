<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on </title>
    <link>http://localhost:1313/projects/</link>
    <description>Recent content in Projects on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 May 2023 14:15:24 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hui: A visual alternative to history written in Rust</title>
      <link>http://localhost:1313/projects/hui/</link>
      <pubDate>Thu, 18 May 2023 14:15:24 +0000</pubDate>
      <guid>http://localhost:1313/projects/hui/</guid>
      <description>hui is a command-line tool to visualize and search your shell history. The source code is available on GitHub.&#xA;Quickly searching through history with hui Overview hui is command-line tool to quickly search through your terminal history. The motivation behind this tool was having a prettier and faster way to do history | grep &amp;lt;search&amp;gt;. I would do this frequently to remember some docker or curl command I had done recently, but couldn&amp;rsquo;t remember the flags I used.</description>
    </item>
    <item>
      <title>Monkey: An Interpreter Written in Go</title>
      <link>http://localhost:1313/projects/interpreter-in-go/</link>
      <pubDate>Tue, 22 Feb 2022 15:18:31 +0000</pubDate>
      <guid>http://localhost:1313/projects/interpreter-in-go/</guid>
      <description>This is an interpreter written in Go for the monkey programming language. The specs for monkey, as well as the steps to implement it, are outlined in the book Writing an Interpreter in Go by Thorsten Ball.&#xA;This post gives a high-level overview of how interpreters work, as well as shows some monkey code in action. The source code of my implementation can be found on GitHub.&#xA;Monkey in Action Overview Basic Syntax Variable assignments use the let keyword:</description>
    </item>
    <item>
      <title>VGDownloader: Download Any Video Game Soundtrack</title>
      <link>http://localhost:1313/projects/vgdownloader/</link>
      <pubDate>Sun, 20 Jun 2021 10:07:25 +0000</pubDate>
      <guid>http://localhost:1313/projects/vgdownloader/</guid>
      <description>VGDownloader is a lightweight CLI that lets you download any* video game soundtrack. Written in Go and built on PromptUI, it pings downloads.khinsider.com to retrieve the album for download. It uses channels and wait groups to concurrently get the download links for every song in the album, downloading them all at the same time. This significantly reduces the amount of time to download the album vs. sequentially downloading from the website.</description>
    </item>
    <item>
      <title>LZW Implementation in Go</title>
      <link>http://localhost:1313/projects/lzw/</link>
      <pubDate>Sun, 18 Apr 2021 10:07:25 +0000</pubDate>
      <guid>http://localhost:1313/projects/lzw/</guid>
      <description>lzw-go is an implementation of the LZW compression algorithm written in Go. It can compress a .txt file into a .lzw file, as well as decompress .lzw files back into their original .txt.&#xA;Note: this is a small version meant to learn how LZW worked. It doesn&amp;rsquo;t work for long text files because when the dictionary exceeds 256, it can&amp;rsquo;t convert the bytes (2^8 = 256) properly. Full implementations account for this and provide more bits after the overflow.</description>
    </item>
    <item>
      <title>StackOverflow Prettifier: Make StackOverflow Not Bad</title>
      <link>http://localhost:1313/projects/stackoverflow_prettifier/</link>
      <pubDate>Sat, 31 Aug 2019 10:07:25 +0000</pubDate>
      <guid>http://localhost:1313/projects/stackoverflow_prettifier/</guid>
      <description>StackOverflow Prettifier is a Firefox extention that that hides all the pointless features of StackOverflow and leaves only the useful bits.&#xA;The miniscule source code is available on GitHub.&#xA;StackOverflow Prettifier Cleans Up the UI Sales Pitch Have you ever gone to StackOverflow to research a question for work and next thing you know you’re 30 clicks deep into sidebar links reading how to make BBQ Sausages? On one hand it’s pretty cool to read about and you effectively got paid hundreds to do so, but perhaps it’s not the best decision for the longevity of your career.</description>
    </item>
  </channel>
</rss>
